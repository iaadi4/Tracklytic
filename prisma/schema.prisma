generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Habit         Habit[]
  Attendance    Attendance[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Habit {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  title     String
  trackers  HabitTracker[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
}

model HabitTracker {
  id        String   @id @default(uuid())
  habitId   String
  goal      Int      @default(0)
  achieved  Int      @default(0)
  year      Int
  month     Int
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, year, month])
  @@index([year, month])
}

model Attendance {
  id            String  @id @default(uuid())
  title         String
  totalClass    Int     @default(0)
  classAttended Int     @default(0)
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  completed     Boolean @default(false)
}